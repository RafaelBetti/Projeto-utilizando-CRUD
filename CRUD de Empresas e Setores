Parte do HTML abaixo:

<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gerenciamento de Empresas e Setores</title>
  <link rel="stylesheet" href="styles.css">
  <script src="script.js" defer></script>
  <script src="server.js" defer></script>
</head>
<body>
  <h1>Gerenciamento de Empresas e Setores</h1>

  <nav>
    <button onclick="mostrarTela('empresas')">Empresas</button>
    <button onclick="mostrarTela('setores')">Setores</button>
    <button onclick="mostrarTela('relatorio')">Relatório</button>
  </nav>

  <section id="empresas" class="tela">
    <h2>Empresas</h2>
    <ul id="empresas-list"></ul>
    <input type="text" id="empresa-nome" placeholder="Nome da Empresa">
    <button onclick="adicionarEmpresa()">Adicionar Empresa</button>
  </section>

  <section id="setores" class="tela" style="display: none;">
    <h2>Setores</h2>
    <ul id="setores-list"></ul>
    <input type="text" id="setor-nome" placeholder="Nome do Setor">
    <button onclick="adicionarSetor()">Adicionar Setor</button>
  </section>

  <section id="relatorio" class="tela" style="display: none;">
    <h2>Relatório de Empresas e Setores</h2>
    <div>
      <label for="filtro-empresa">Filtro Empresa:</label>
      <input type="text" id="filtro-empresa" placeholder="Filtrar por Empresa">
      <label for="filtro-setor">Filtro Setor:</label>
      <input type="text" id="filtro-setor" placeholder="Filtrar por Setor">
      <button onclick="filtrarRelatorio()">Aplicar Filtros</button>
    </div>

    <table id="relatorio-table" border="1" style="margin-top: 20px; width: 100%; text-align: left;">
      <thead>
        <tr>
          <th>Empresa</th>
          <th>Setor</th>
        </tr>
      </thead>
      <tbody id="relatorio-table-body">
      </tbody>
    </table>
  </section>
    
</body>
</html>

//----------------------------------------------------------------------------------------------------------------------//

Parte do CSS abaixo:

body {
  font-family: Arial, sans-serif;
  margin: 20px;
  background-color: #f9f9f9;
}

h1 {
  text-align: center;
  color: #333;
}

nav {
  text-align: center;
  margin-bottom: 20px;
}

nav button {
  padding: 10px 20px;
  font-size: 16px;
  color: #fff;
  background-color: #007bff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

nav button:hover {
  background-color: #0056b3;
}

.tela {
  display: none;
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

ul {
  list-style-type: none;
  padding: 0;
  margin-top: 10px;
}

ul li {
  padding: 8px;
  border-bottom: 1px solid #ddd;
}

input[type="text"], button {
  margin-top: 10px;
  padding: 8px;
  font-size: 14px;
}

input[type="text"] {
  width: calc(100% - 20px);
  padding: 10px;
  margin-right: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 10px 15px;
  font-size: 14px;
  color: #fff;
  background-color: #28a745;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #218838;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

table, th, td {
  border: 1px solid #ddd;
}

th, td {
  padding: 12px;
  text-align: left;
}

th {
  background-color: #f4f4f4;
  font-weight: bold;
}

#relatorio-table-body tr:nth-child(even) {
  background-color: #f9f9f9;
}

label {
  font-weight: bold;
  margin-right: 10px;
}

div {
  margin-bottom: 15px;
}

//----------------------------------------------------------------------------------------------------------------------//

Parte do JavaScript abaixo, 'script.js':

const apiUrl = 'http://localhost:5000';

function mostrarTela(telaId) {
  const telas = document.querySelectorAll('.tela');
  telas.forEach(tela => tela.style.display = 'none');
  document.getElementById(telaId).style.display = 'block';
}

async function listarEmpresas() {
  const response = await fetch(`${apiUrl}/empresas`);
  const empresas = await response.json();
  const lista = document.getElementById('empresas-list');
  lista.innerHTML = '';
  empresas.forEach((empresa) => {
    const item = document.createElement('li');
    item.textContent = empresa.nome;
    lista.appendChild(item);
  });
}

async function adicionarEmpresa() {
  const nome = document.getElementById('empresa-nome').value;
  await fetch(`${apiUrl}/empresas`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ nome })
  });
  listarEmpresas();
}

async function listarSetores() {
  const response = await fetch(`${apiUrl}/setores`);
  const setores = await response.json();
  const lista = document.getElementById('setores-list');
  lista.innerHTML = '';
  setores.forEach((setor) => {
    const item = document.createElement('li');
    item.textContent = setor.nome;
    lista.appendChild(item);
  });
}

async function adicionarSetor() {
  const nome = document.getElementById('setor-nome').value;
  await fetch(`${apiUrl}/setores`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ nome })
  });
  listarSetores();
}

app.get('/relatorio', async (req, res) => {
  const { empresa, setor } = req.query;

  const query = `
    SELECT e.nome AS empresa, s.nome AS setor
    FROM empresas e
    CROSS JOIN setores s
    WHERE ($1 = '' OR LOWER(e.nome) LIKE $2)
      AND ($3 = '' OR LOWER(s.nome) LIKE $4)
  `;

  const valores = [
    empresa || '', `%${empresa || ''}%`,
    setor || '', `%${setor || ''}%`
  ];

  const result = await pool.query(query, valores);
  res.json(result.rows);
});

console.log('Empresas:', empresas);
console.log('Setores:', setores);
console.log('Tabela:', tabelaCorpo.innerHTML);


async function filtrarRelatorio() {
  const filtroEmpresa = document.getElementById('filtro-empresa').value.toLowerCase();
  const filtroSetor = document.getElementById('filtro-setor').value.toLowerCase();

  try {

    const empresas = await (await fetch(`${apiUrl}/empresas`)).json();
    const setores = await (await fetch(`${apiUrl}/setores`)).json();

    const tabelaCorpo = document.getElementById('relatorio-table-body');
    tabelaCorpo.innerHTML = ''; 

    let encontrouResultados = false;


    empresas.forEach((empresa) => {
      setores.forEach((setor) => {
        if (
          (filtroEmpresa === '' || empresa.nome.toLowerCase().includes(filtroEmpresa)) &&
          (filtroSetor === '' || setor.nome.toLowerCase().includes(filtroSetor))
        ) {
          encontrouResultados = true;


          const linha = document.createElement('tr');

          const celulaEmpresa = document.createElement('td');
          celulaEmpresa.textContent = empresa.nome;
          linha.appendChild(celulaEmpresa);

          const celulaSetor = document.createElement('td');
          celulaSetor.textContent = setor.nome;
          linha.appendChild(celulaSetor);

          tabelaCorpo.appendChild(linha);
        }
      });
    });


    if (!encontrouResultados) {
      const linha = document.createElement('tr');
      const celula = document.createElement('td');
      celula.setAttribute('colspan', '2');
      celula.textContent = 'Nenhum resultado encontrado.';
      linha.appendChild(celula);
      tabelaCorpo.appendChild(linha);
    }
  } catch (error) {
    console.error('Erro ao buscar dados:', error);
  }
}


//----------------------------------------------------------------------------------------------------------------------//

Parte do JavaScript abaixo, 'server.js':

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { Pool } = require('pg');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const pool = new Pool({
  user: 'postgres', 
  host: 'localhost',
  database: 'gerenciamento', 
  password: 'postgres123', 
  port: 5432, 
});

const handleError = (err, res) => {
  console.error('Erro:', err.message);
  res.status(500).json({ error: 'Erro no servidor. Tente novamente mais tarde.' });
};

app.get('/empresas', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM empresas');
    res.json(result.rows);
  } catch (err) {
    handleError(err, res);
  }
});

app.post('/empresas', async (req, res) => {
  const { nome } = req.body;
  if (!nome) {
    return res.status(400).json({ error: 'O campo nome é obrigatório.' });
  }
  try {
    const result = await pool.query(
      'INSERT INTO empresas (nome) VALUES ($1) RETURNING *',
      [nome]
    );
    res.json(result.rows[0]);
  } catch (err) {
    handleError(err, res);
  }
});

app.put('/empresas/:id', async (req, res) => {
  const { id } = req.params;
  const { nome } = req.body;
  if (!nome) {
    return res.status(400).json({ error: 'O campo nome é obrigatório.' });
  }
  try {
    const result = await pool.query(
      'UPDATE empresas SET nome = $1 WHERE id = $2 RETURNING *',
      [nome, id]
    );
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Empresa não encontrada.' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    handleError(err, res);
  }
});

app.delete('/empresas/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query('DELETE FROM empresas WHERE id = $1', [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Empresa não encontrada.' });
    }
    res.json({ message: 'Empresa deletada com sucesso.' });
  } catch (err) {
    handleError(err, res);
  }
});

app.get('/setores', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM setores');
    res.json(result.rows);
  } catch (err) {
    handleError(err, res);
  }
});

app.post('/setores', async (req, res) => {
  const { nome } = req.body;
  if (!nome) {
    return res.status(400).json({ error: 'O campo nome é obrigatório.' });
  }
  try {
    const result = await pool.query(
      'INSERT INTO setores (nome) VALUES ($1) RETURNING *',
      [nome]
    );
    res.json(result.rows[0]);
  } catch (err) {
    handleError(err, res);
  }
});

app.put('/setores/:id', async (req, res) => {
  const { id } = req.params;
  const { nome } = req.body;
  if (!nome) {
    return res.status(400).json({ error: 'O campo nome é obrigatório.' });
  }
  try {
    const result = await pool.query(
      'UPDATE setores SET nome = $1 WHERE id = $2 RETURNING *',
      [nome, id]
    );
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Setor não encontrado.' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    handleError(err, res);
  }
});

app.delete('/setores/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query('DELETE FROM setores WHERE id = $1', [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: 'Setor não encontrado.' });
    }
    res.json({ message: 'Setor deletado com sucesso.' });
  } catch (err) {
    handleError(err, res);
  }
});

app.listen(5000, () => {
  console.log('Servidor rodando na porta 5000');
});


//----------------------------------------------------------------------------------------------------------------------//

Parte do Banco de Dados abaixo:

SELECT * FROM public.gerenciamento;
SELECT * FROM empresas;
SELECT * FROM setores;

CREATE DATABASE athia;

\c gerenciamento

CREATE TABLE empresas (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL
);

CREATE TABLE setores (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL
);

CREATE TABLE gerenciamento (
    empresa_id INT REFERENCES empresas(id) ON DELETE CASCADE,
    setor_id INT REFERENCES setores(id) ON DELETE CASCADE,
    PRIMARY KEY (empresa_id, setor_id)
);

//----------------------------------------------------------------------------------------------------------------------//
